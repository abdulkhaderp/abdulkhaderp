{"version":3,"sources":["components/commentList.js","components/commentForm.js","components/imageSect.js","App.js","serviceWorker.js","index.js"],"names":["CommentList","state","fake","this","interval","setInterval","setState","Date","now","clearInterval","temp","comments","localStorage","getItem","JSON","parse","className","length","map","value","index","Fragment","key","name","ts","comment","Component","CommenForm","email","show","initialState","handleSubmit","event","arr","obj","stringify","toString","split","unshift","setItem","handleInputChange","target","id","title","text","onConfirm","type","placeholder","onChange","onClick","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RACqBA,E,2MACjBC,MAAQ,CACJC,KAAK,I,mFAEW,IAAD,OACfC,KAAKC,SAAWC,aAAY,WACxB,EAAKC,SAAS,CAACJ,KAAKK,KAAKC,UAC3B,O,6CAGFC,cAAcN,KAAKC,Y,+BAGnB,IAAIM,EAAK,GACLC,EAAWC,aAAaC,QAAQ,gBAGpC,OAFAH,EAAQC,EAAYG,KAAKC,MAAMJ,GAAYD,EAGvC,yBAAKM,UAAU,aACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,eAAf,mBAGA,yBAAKA,UAAU,aAELN,EAAKO,OAAUP,EAAKQ,KAAI,SAACC,EAAMC,GAC7B,OAAO,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,GAChC,wBAAIJ,UAAU,cAAeG,EAAMI,KAAK,0BAAMP,UAAU,eAAhB,gBAA4CG,EAAMK,KAC1F,uBAAGR,UAAU,aAAaG,EAAMM,aAE3B,mD,GA9BQC,a,uBCCpBC,E,2MACjB1B,MAAQ,CACJsB,KAAK,GACLK,MAAM,GACNH,QAAQ,GACRD,GAAG,GACHK,MAAK,G,EAETC,aAAe,CACXP,KAAK,GACLK,MAAM,GACNH,QAAQ,GACRD,GAAG,I,EAIPO,aAAe,SAACC,GACZ,EAAK1B,SAAS,CAACuB,MAAK,IACpB,IAAII,EAAMrB,aAAaC,QAAQ,gBAC3BH,EAAK,GACNuB,IAAKvB,EAAMI,KAAKC,MAAMkB,IACzB,IAAIC,EAAMpB,KAAKC,MAAMD,KAAKqB,UAAU,EAAKlC,QACzCiC,EAAIV,IAAK,IAAIjB,MAAO6B,WAAWC,MAAM,OAAO,GAC5C3B,EAAK4B,QAAQJ,GACVxB,EAAKO,OAAS,IAAGP,EAAKO,OAAO,GAChCL,aAAa2B,QAAQ,eAAezB,KAAKqB,UAAUzB,IACnD,EAAKJ,SAAS,EAAKwB,e,EAEvBU,kBAAkB,SAACR,GACf,EAAK1B,SAAL,eAAgB0B,EAAMS,OAAOC,GAAKV,EAAMS,OAAOtB,S,wEAE1C,IAAD,OAEJ,OACI,yBAAKH,UAAU,aACf,kBAAC,IAAD,CACIa,KAAM1B,KAAKF,MAAM4B,KACjBc,MAAM,GACNC,KAAK,4BACLC,UAAW,kBAAM,EAAKvC,SAAS,CAAEuB,MAAM,OAEvC,yBAAKb,UAAU,QACX,yBAAKA,UAAU,eAAf,cAGA,yBAAKA,UAAU,aACZ,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,2BAAO8B,KAAK,OAAO9B,UAAU,oBAAoB0B,GAAG,OAAOvB,MAAOhB,KAAKF,MAAMsB,KAAMwB,YAAY,OAAOC,SAAU7C,KAAKqC,oBACrH,2BAAOM,KAAK,OAAO9B,UAAU,oBAAoB0B,GAAG,QAAQvB,MAAOhB,KAAKF,MAAM2B,MAAOmB,YAAY,WAAWC,SAAU7C,KAAKqC,oBAC3H,8BAAWxB,UAAU,oBAAoB0B,GAAG,UAAUvB,MAAOhB,KAAKF,MAAMwB,QAASsB,YAAY,UAAUC,SAAU7C,KAAKqC,qBAG1H,yBAAKxB,UAAU,uBACV,2BAAO8B,KAAK,SAAS9B,UAAU,kBAAkBG,MAAM,SAAS8B,QAAS9C,KAAK4B,aAAcmB,UAAW/C,KAAKF,MAAMsB,OAASpB,KAAKF,MAAM2B,QAAQzB,KAAKF,MAAMwB,mB,GAtDjJC,aCDDA,YCuBxByB,MAlBf,WACE,OACE,yBAAKnC,UAAU,OACd,yBAAKA,UAAU,WACf,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,UAGjB,yBAAKA,UAAU,YACZ,kBAAC,EAAD,UCLUoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.30aead86.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nexport default class CommentList extends Component{\r\n    state = {\r\n        fake:\"\"\r\n    }\r\n    componentDidMount(){\r\n        this.interval = setInterval(()=>{\r\n            this.setState({fake:Date.now()});\r\n        },1000);\r\n    }\r\n    componentWillUnmount(){\r\n        clearInterval(this.interval);\r\n    }\r\n    render(){\r\n        let temp=[];\r\n        let comments = localStorage.getItem(\"commentArray\");\r\n        temp = (comments) ? JSON.parse(comments) : temp;\r\n        \r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"card list\">\r\n                    <div className=\"card-header\">\r\n                        Recent Comments\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                         \r\n                           { (temp.length) ? temp.map((value,index)=>{\r\n                                return <React.Fragment key={index}>\r\n                            <h6 className=\"card-title\" >{value.name}<span className=\"commentTime\">commented at {value.ts}</span></h6>\r\n                            <p className=\"card-text\">{value.comment}</p>\r\n                                </React.Fragment>\r\n                            }) : <h6>No Comments!</h6>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Component} from 'react';\r\nimport SweetAlert from 'sweetalert2-react';\r\nexport default class CommenForm extends Component{\r\n    state = {\r\n        name:\"\",\r\n        email:\"\",\r\n        comment:\"\",\r\n        ts:\"\",\r\n        show:false\r\n    }\r\n    initialState = {\r\n        name:\"\",\r\n        email:\"\",\r\n        comment:\"\",\r\n        ts:\"\"\r\n        \r\n    }\r\n   \r\n    handleSubmit = (event) =>{\r\n        this.setState({show:true});\r\n        let arr = localStorage.getItem(\"commentArray\");\r\n        let temp=[];\r\n        if(arr) temp= JSON.parse(arr);\r\n        let obj = JSON.parse(JSON.stringify(this.state));\r\n        obj.ts = new Date().toString().split(\"GMT\")[0];\r\n        temp.unshift(obj);\r\n        if(temp.length > 5) temp.length=5;\r\n        localStorage.setItem(\"commentArray\",JSON.stringify(temp));\r\n        this.setState(this.initialState);\r\n    }\r\n    handleInputChange=(event)=>{\r\n        this.setState({[event.target.id]: event.target.value});\r\n    }\r\n    render(){\r\n      \r\n        return(\r\n            <div className=\"container\">\r\n            <SweetAlert\r\n                show={this.state.show}\r\n                title=\"\"\r\n                text=\"Thanks for your feedback!\"\r\n                onConfirm={() => this.setState({ show: false })}\r\n            />\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        Talk To Us\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                       <div className=\"row\">\r\n                           <div className=\"col-md-6\">\r\n                               <input type=\"text\" className=\"form-control mb-1\" id=\"name\" value={this.state.name} placeholder=\"Name\" onChange={this.handleInputChange}></input>\r\n                               <input type=\"text\" className=\"form-control mb-1\" id=\"email\" value={this.state.email} placeholder=\"Email id\" onChange={this.handleInputChange}></input>\r\n                               <textarea  className=\"form-control mb-1\" id=\"comment\" value={this.state.comment} placeholder=\"Comment\" onChange={this.handleInputChange}></textarea>\r\n\r\n                           </div>\r\n                           <div className=\"col-md-6 btn-holder\">\r\n                                <input type=\"button\" className=\"btn btn-success\" value=\"Submit\" onClick={this.handleSubmit} disabled={!this.state.name || !this.state.email||!this.state.comment}></input>\r\n                           </div>\r\n                       </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Component} from 'react';\r\nexport default class ImageSect extends Component{\r\n    state = {\r\n        fake:\"\"\r\n    }\r\n   \r\n    render(){\r\n        \r\n        return(\r\n            <div className=\"container image-wrapper\">\r\n                <div className=\"img-animate kenburns-left\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport CommentList from './components/commentList';\nimport CommentForm from './components/commentForm';\nimport ImageSect from './components/imageSect';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <div className=\"header\"></div>\n     <div className=\"row\">\n       <div className=\"col-md-6\">\n         <CommentList/>\n         <div className=\"pb-2\"></div>\n         \n       </div>\n       <div className=\"col-md-6\">\n          <CommentForm/>\n       </div>\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}